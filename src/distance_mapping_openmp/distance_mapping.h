#ifndef _DISTANCE_MAPPING_H_
#define _DISTANCE_MAPPING_H_

/*
	This function takes FT (Closet Feature Voxel Transformation) as an input and performs 
	distance tranformation based on the scheme.

	Supported schemes: center-to-center, center-to-face.

	Arguments: scheme - center-to-center or center-to-face;
		FT - The FT generated by MAURER or Danielsson;
		row_vol - The raw volume that contains the boundary face information;
		height, width, depth - Size of the volume;
		ed_out - Final output
*/
void distMapping (char *scheme,
			int *FT, 
                        uchar *raw_vol, 
                        int height, int width, int depth, 
                        float *ed_out);

/*
	Helper functions, the following functions are the building blocks of distMapping(...)
*/

/*
	distToClosetFacePointOfCFV: for each voxel with coordinate of (i, j, k), it determines
	the distance to the closet boundary face of its CFV (closet feature voxel) with coordinate of 
	(cfv_i, cfv_j, cfv_k).

	Argument: i, j, k - the voxel that is currently processing;
		cfv_i, cfv_j, cfv_k - its CFV;
		cfv_val - the value of its CFV that contains the boundary face information.

*/
double distToClosetFacePointOfCFV(int i, int j, int k,
                                int cfv_i, int cfv_j, int cfv_k,
                                uchar cfv_val);

/*
	distToFacePoint: sub-function of distToClosetFacePointOfCFV. 

	For each boundary face, there are nine points of interests in total. This function
	determins the closet point of interests.
*/
double distToFacePoint(int unchanged,
                        double i, double j, double k,
                        double cfv_i, double cfv_j, double cfv_k);

/*
	calcDist: euclidean distance between voxel with coordinate of (i, j, k) and
	voxel with coordinate of (target_i, target_j, target_k).	
*/
double calcDist(double i, double j, double k,
                double target_i, double target_j, double target_k);

/*
	isKthBitSet: it helps to detect which boundary face the CFV has. 
*/
bool isKthBitSet(int n, int k);

#endif

