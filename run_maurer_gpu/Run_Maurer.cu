#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <sys/time.h>

#include "../src/maurer_openmp/maurer.h"
#include "../src/distance_transformation_openmp/distance_transformation.h" 

#include "../src/maurer_gpu/maurer_GPU.cuh"

/*
	Volume info
*/
#define HEIGHT 256
#define WIDTH 256
#define DEPTH 64

typedef unsigned char uchar;

/*
	Functions just for testing
*/
void genFC(uchar *); // Simply generate a feature cuboid as shown in report (has boundary face)
int check(int *, int *, int); // Check the Maurer's FT with the reference FT

int main(int argc, char *argv[])
{
	if (argc != 2)
	{
		printf("Error: Please provide mapping scheme. ");
		printf("Example: %s --center-face \n", argv[0]);
		exit(0);
	}

	/***************************************************
		Step one: initialize testing volume
	****************************************************/
	uchar *raw_vol;
	
	// raw_vol will be transfered to GPU
	// cudaHostAlloc is similar to malloc but faster when transfering data to GPU
	if (cudaHostAlloc((void **)&raw_vol, HEIGHT * WIDTH * DEPTH * sizeof(uchar), \
						cudaHostAllocDefault) != cudaSuccess)
	{
		printf("cudaHostAlloc() failed! \n");
		exit(0);
	}
	
	for(int i = 0; i < HEIGHT * WIDTH * DEPTH; i++)
	{
		raw_vol[i] = 0;
	}

	genFC(raw_vol); // Generate a feature cuboid 

	float sp[3] = {1.0, 2.5, 1.5}; // Voxel spacings, {i (height of a voxel), 
				//		j (width of a voxel), 
				//		k (depth of a voxel)}
	float sp2[3] = {
		sp[0] * sp[0],
	       	sp[1] * sp[1],
		sp[2] * sp[2]	
	};

	/********************************************************************
		Step two: initialize distance mapping output for OpenMP	
	*********************************************************************/
	// maurer_ft_openmp : the maurer's FT generated by OpenMP
	int *maurer_ft_openmp = (int *)malloc(HEIGHT * WIDTH * DEPTH * sizeof(int));
	// dist_trans_openmp : distance translation generated by OpenMP
	float *dist_trans_openmp = (float *)malloc(HEIGHT * WIDTH * DEPTH * sizeof(float));	

	// Initialization
	for (int i = 0; i < HEIGHT * WIDTH * DEPTH; i++)
	{
		maurer_ft_openmp[i] = -1;
	}	

	/*********************************************************************
		Step three: initialize distance mapping output for GPU 
	**********************************************************************/
	// maurer_ft_gpu : the maurer's FT generated by GPU
	int *maurer_ft_gpu;
	if (cudaHostAlloc((void **)&maurer_ft_gpu, HEIGHT * WIDTH * DEPTH * sizeof(int), \
						cudaHostAllocDefault) != cudaSuccess)
	{
		printf("cudaHostAlloc() failed! \n");
		exit(0);
	}

	// Initialization
	for (int i = 0; i < HEIGHT * WIDTH * DEPTH; i++)
	{
		maurer_ft_gpu[i] = -1;
	}

	// dist_trans_gpu : distance translation generated by GPU
	float *dist_trans_gpu;
	if (cudaHostAlloc((void **)&dist_trans_gpu, HEIGHT * WIDTH * DEPTH * sizeof(float), \
                                                cudaHostAllocDefault) != cudaSuccess)
        {
                printf("cudaHostAlloc() failed! \n");
                exit(0);
        }

	/*******************************************************
		Step four: Allocate device (GPU) memory 
	********************************************************/
	// Memory location contains raw volume
	uchar *dev_raw_vol;
	if (cudaMalloc((void **)&dev_raw_vol, HEIGHT * WIDTH * DEPTH * sizeof(uchar)) != cudaSuccess)
	{
		printf("cudaMalloc() failed.\n");
		exit(0);
	}

	// Transfer raw_vol to GPU
	if (cudaMemcpy(dev_raw_vol, raw_vol, HEIGHT * WIDTH * DEPTH * sizeof(uchar), \
		cudaMemcpyHostToDevice) != cudaSuccess)
	{
		printf("cudaMemcpy() failed! \n");
	}

	// Memory location contains FT
	int *dev_maurer_ft;
	if (cudaMalloc((void **)&dev_maurer_ft, HEIGHT * WIDTH * DEPTH * sizeof(int)) \
			!= cudaSuccess)
        {
                printf("cudaMalloc() failed.\n");
                exit(0);
        }
	
	// Transfer the initialized FT to GPU
	if (cudaMemcpy(dev_maurer_ft, maurer_ft_gpu, HEIGHT * WIDTH * DEPTH * sizeof(int), \
                cudaMemcpyHostToDevice) != cudaSuccess)
        {
                printf("cudaMemcpy() failed! \n");
        }	

	// Memory location contains distance translation
	float *dev_dist_trans;
	if (cudaMalloc((void **)&dev_dist_trans, HEIGHT * WIDTH * DEPTH * sizeof(float)) \
                        != cudaSuccess)
        {
                printf("cudaMalloc() failed.\n");
                exit(0);
        }

	/*****************************************************************************
		Step five: Distance mapping using OpenMP (Reference Solution)
	******************************************************************************/
	// Perform FT using maurer's OpenMP implementaion
	printf("\nPerforming Maurer's Distance Mapping using OpenMP...\n");
	struct timeval stopCPU, startCPU;
	gettimeofday(&startCPU, NULL);
	
	maurerFT(raw_vol, sp2, \
		HEIGHT, WIDTH, DEPTH, \
		maurer_ft_openmp);

	distTransformation(argv[1], \
			maurer_ft_openmp, \
			raw_vol, sp2, \
			HEIGHT, WIDTH, DEPTH, \
			dist_trans_openmp);

	gettimeofday(&stopCPU, NULL);
	long seconds = stopCPU.tv_sec - startCPU.tv_sec;
	long useconds = stopCPU.tv_usec - startCPU.tv_usec;
	long mtime = seconds * 1000 + useconds / 1000.0;
	printf("\nOpenMP Execution Time: %ld ms. \n", mtime);	
	
	/*******************************************************
		Step six: Distance mapping using GPU
	*******************************************************/
	dim3 dimBlock_D1;
	dimBlock_D1.x = D1_NUM_THREADS_PER_BLOCK_X;
	dimBlock_D1.y = D1_NUM_THREADS_PER_BLOCK_Y;
	dimBlock_D1.z = D1_NUM_THREADS_PER_BLOCK_Z;
		
	/*
		Free memory resource
	*/
	cudaFreeHost(raw_vol);

	free(maurer_ft_openmp);
	free(dist_trans_openmp);

	cudaFreeHost(maurer_ft_gpu);
	cudaFreeHost(dist_trans_gpu);

	cudaFree(dev_raw_vol);
	cudaFree(dev_maurer_ft);
	cudaFree(dev_dist_trans);

	return 1;
}

void genFC(uchar *vol)
{
	/* Distance between slices */
	int slice_stride = HEIGHT * WIDTH;

	int row_id, col_id, dep_id;

	/* Front and back (of the feature cuboid) */
	for (row_id = 1; row_id < (HEIGHT - 1); row_id++)
	{
		for (col_id = 1; col_id < (WIDTH - 1); col_id++)
		{
			// Front FVs should have negative K face
			vol[0 * slice_stride + row_id * WIDTH + col_id] |= 0x04;

			// Back FVs should have positive K face
			vol[(DEPTH - 1) * slice_stride + row_id * WIDTH + col_id] |= 0x20;
		}
	}

	/* Left and right */
	for (dep_id = 0; dep_id < DEPTH; dep_id++)
	{
		for (row_id = 1; row_id < (HEIGHT - 1); row_id++)
		{
			// Left FVs should have negative I face
			vol[dep_id * slice_stride + row_id * WIDTH + 1] |= 0x01;

			// Right FVs should have positive I face
			vol[dep_id * slice_stride + row_id * WIDTH + (WIDTH - 2)] |= 0x08;
		}
	}

	/* Top and bottom */
	for (dep_id = 0; dep_id < DEPTH; dep_id++)
	{
		for (col_id = 1; col_id < (WIDTH - 1); col_id++)
		{
			vol[dep_id * slice_stride + 1 * WIDTH + col_id] |= 0x02;
		
			vol[dep_id * slice_stride + (HEIGHT - 2) * WIDTH + col_id] |= 0x10;
		}
	}
}

